import socket
import time
import threading
import signal
import sys
from random import randint

# Socket Varables
TCP_IP = "130.102.86.142"
#TCP_IP = "192.168.1.107"
TCP_PORT = 8888
BUFFER_SIZE = 1024

# Global Varables
UserSelect = 0
layer = 0
pixel = 0
red = 8
green = 8
blue = 8
mode = 1
pulsedirection = 1

def connect(IP, Port):
    """
    Connects a TCP/IP socket to the entered IP and Port
    """
    try:
        sock.connect((TCP_IP, TCP_PORT))
        return 0
    except socket.timeout:
        time.sleep(4)
        return 1

def signal_handler(signum, frame):
    """
    Handles the SIGINT signal generated by the keyboard interupt
    ctrl-c
    """
    signal.signal(signal.SIGINT, original_sigint)
    sys.exit(0)

def ensure_Connect():
    """
    ensures the socket connects with a while loop
    that will not return till 0 is received from the connection
    function (i.e. the socket has not encountered and error)
    """
    while (connect(TCP_IP,TCP_PORT)):
        print "timeout"
    print "connected"

if __name__ == '__main__':
    """
    The main execution thread of the program
    all the magic happens here folks.
    Take user input and convert it to Byte value
    then send it on its way to the microcontroller
    """
    # register SIGINT to call back to a gracefull exit function
    original_sigint = signal.getsignal(signal.SIGINT)
    signal.signal(signal.SIGINT, signal_handler)

    # set up the TCP / IP socket so that it has a timeout
    # is reusable and automaticaly binds to a local free port
    sock = socket.socket(socket.AF_INET, # Internet
             socket.SOCK_STREAM) # TCP
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.settimeout(5)
    sock.bind(('',0))

    # connect the socket to the microcontroller
    ensure_Connect()

    # get user input, this may have to be revised in the future
    # this in this section you can also bitbang, to see how fast the 
    # connection is and how quickly the microcontroller can operate.
    while (True):
        toggle = 8
        message = ""

        if(UserSelect):
            layer = raw_input("layer: ")
            pixel = raw_input("pixel: ")
            red = raw_input("red: ")
            green = raw_input("green: ")
            blue = raw_input("blue: ")

            # convert the raw numbers into Byte value, i.e. 0 represents the byte value of 0
            # 1, insted of 51 (or whatever) has value 1
            message += ( str(unichr(int(layer))) + str(unichr(int(pixel))) + str(unichr(int(red))) + str(unichr(int(green))) + str(unichr(int(blue))) )
        else:
            # Random Pixel, Random Off
            if(mode == 0):
                print "Random"
                time.sleep(.1)
                for a in range(0,512):
                    message += ( str(unichr(int(str(randint(0,8))))) + str(unichr(int(str(randint(0,63))))) + str(unichr(int(red))) +str(unichr(int(green))) + str(unichr(int(blue))) )
                    pixel += 1
                    red = randint(0,8)
                    green = randint(0,8)
                    blue = randint(0,8)
                    message += ( str(unichr(int(str(randint(0,8))))) + str(unichr(int(str(randint(0,63))))) + str(unichr(int('0'))) +str(unichr(int('0'))) + str(unichr(int('0'))) )
            
            # Pulse.
            if(mode == 1): 
                print "Pulse" + str(red) + str(green) + str(blue)  
                time.sleep(.1)
                for a in range(0,512):     
                    if(pixel == 64):
                        layer += 1
                        pixel = 0
                        if(layer == 8):
                            layer = 0
                            
                            if(green == 0):
                                pulsedirection = 1
                            elif(green == 8):
                                pulsedirection = -1
                            
                            red += pulsedirection

                            green += pulsedirection

                            blue += pulsedirection

                    message += ( str(unichr(int(layer))) + str(unichr(int(pixel))) + str(unichr(int(red))) + str(unichr(int(green))) + str(unichr(int(blue))) )
                    pixel += 1

            # Cube ON OFF
            if(mode == 2):
                print "On Off"
                time.sleep(1)
                for a in range(0,512):
                    message += ( str(unichr(int(layer))) + str(unichr(int(pixel))) + str(unichr(int(red))) +str(unichr(int(green))) + str(unichr(int(blue))) )
                    pixel += 1

                    if(pixel == 64):
                        layer += 1
                        pixel = 0
                        if(layer == 8):
                            layer = 0
                            if(red == 0):
                                red = 8
                            else:
                                red = 0

                            if(green == 0):
                                green = 8
                            else:
                                green = 0

                            if(blue == 0):
                                blue = 8
                            else:
                                blue = 0

            if(mode == 3):
                print "Random"
                time.sleep(.1)
                for a in range(0,512):
                    message += ( str(unichr(int(str(randint(0,8))))) + str(unichr(int(str(randint(0,63))))) + str(unichr(int(red))) +str(unichr(int(green))) + str(unichr(int(blue))) )
                    pixel += 1
                    red = randint(0,8)
                    green = randint(0,8)
                    blue = randint(0,8)

            if(mode == 4):
                print "One at a time"
                time.sleep(.1)
                for a in range(0,1):
                    message += ( str(unichr(int(layer))) + str(unichr(int(pixel))) + str(unichr(int(red))) +str(unichr(int(green))) + str(unichr(int(blue))) )
                    pixel += 1

                    if(pixel == 64):
                        layer += 1
                        pixel = 0
                        if(layer == 8):
                            layer = 0
                            if(red == 0):
                                red = 8
                            else:
                                red = 0

                            if(green == 0):
                                green = 8
                            else:
                                green = 0

                            if(blue == 0):
                                blue = 8
                            else:
                                blue = 0
                    
            #time.sleep(.2)
        # try to send the message, if failur, then re-connect
        try:
            sock.send(message)
        except socket.error:
            print "disconnected, atempting reconnect"
            ensure_Connect()
            sock.send(message)
            
        message = ""
