#include <time.h>
#include <plib.h>
#include <Wiring.h>
#include <chipKITEthernet.h>

#include "pin_out.h"

// Ethernet

byte ip[] = { 192,168,1,190 };
byte mac[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
byte gateway[] = { 192,168,1, 1 };
byte subnet[] = { 255, 255, 255, 0 };

unsigned short localPort = 8888;      // local port to listen on

Server server = Server(8888);

int bytes_read = 0;
int currentDataPossition = 0;

// SPI
#define pinSS 82
#define pinMOSI 83
#define pinSCK 84

// Globals

int counter = 70;
int prevcounter = 70;

int colour = 78;
int prevcolour = 78;

int brightness = 27;
int colourcounter = 0;
int duty = 8;

uint32_t spiRed = 0;
uint32_t spiGreen = 0;
uint32_t spiBlue = 0;

char incomingByte = 0;
char direction = 1;

char redchange = 1;
char bluechange = 1;
char greenchange = 1;

char ledArray[8][3] = 	{
	{0, 7, 1},
	{1, 6, 0},
	{2, 5, 8},
	{3, 4, 7},
	{4, 3, 6},
	{5, 2, 5},
	{6, 1, 4},
	{7, 0, 3}
						};

short ledstate[512][3];

String myString;

void setup() {

    Serial.begin(9600); 
    Serial.println("Initilising");

    Serial.println("Ethernet");
    // start the Ethernet and UDP:
    Ethernet.begin(mac,ip,gateway,subnet);
    // Ethernet.begin();  // use DHCP

    server.begin();

    Serial.println("SPI");

    // chip ss
    pinMode(pinSS, OUTPUT);
    // chip sdi
    pinMode(pinMOSI, OUTPUT);
    // chip clk
    pinMode(pinSCK, OUTPUT);

    Serial.println("Layers");

	// driver pins
	pinMode(70, OUTPUT);
	pinMode(71, OUTPUT);
	pinMode(72, OUTPUT);
	pinMode(73, OUTPUT);
	pinMode(74, OUTPUT);
	pinMode(75, OUTPUT);
	pinMode(76, OUTPUT);
	pinMode(77, OUTPUT);

	// RGB pins
	pinMode(78, OUTPUT);
	pinMode(79, OUTPUT);
	pinMode(80, OUTPUT);

	digitalWrite(78, HIGH);
	digitalWrite(79, HIGH);
	digitalWrite(80, HIGH);

    Serial.println("Timers");

    // ledarray modifier
    OpenTimer3(T3_ON | T3_PS_1_256 | T3_SOURCE_INT, 50000);

    // Set up the timer interrupt with a priority of 2
    INTEnable(INT_T3, INT_ENABLED);
    INTSetVectorPriority(INT_TIMER_3_VECTOR, INT_PRIORITY_LEVEL_2);
    INTSetVectorSubPriority(INT_TIMER_3_VECTOR, INT_SUB_PRIORITY_LEVEL_0);

    delay(1);

    // Enable multi-vector interrupts
    INTConfigureSystem(INT_SYSTEM_CONFIG_MULT_VECTOR);
    INTEnableInterrupts();

    attachCoreTimerService(bamCallback);
    delay(1);
    attachCoreTimerService(layerCallback);
    delay(1);
    
    Serial.println("Finished!");
}

void loop() {
  
    char fromclient[1024];
    // if there's data available, read a packet
    Client client = server.available();

    if(client == true) {

        bytes_read = client.read((uint8_t*)fromclient,1024);
        currentDataPossition = 0; 

        fromclient[bytes_read] = '\0';

        ProcessString(fromclient);

        if(fromclient[0] == 'r') {
            if(redchange) 
                redchange = 0;
            else
                redchange = 1;
        }

        if(fromclient[0] == 'b') {
            if(bluechange) 
                bluechange = 0;
            else
                bluechange = 1;
        }

        if(fromclient[0] == 'g') {
            if(greenchange) 
                greenchange = 0;
            else
                greenchange = 1;
        }
    }
}

void ProcessString(char* data) {
    // define the packet [] is 1 byte 0 -> 256
    // [Layer][Pixel][Red][Green][Blue]#

    char readLayer = data[currentDataPossition];
    Serial.println(readLayer,DEC);
    currentDataPossition++;
    char readPixel = data[currentDataPossition];
    Serial.println(readPixel,DEC);
    currentDataPossition++;
    char readRed = data[currentDataPossition];
    Serial.println(readRed,DEC);
    currentDataPossition++;
    char readGreen = data[currentDataPossition];
    Serial.println(readGreen,DEC);
    currentDataPossition++;
    char readBlue = data[currentDataPossition];
    Serial.println(readBlue,DEC);
    currentDataPossition++;

    ledArray[readPixel][0] = readRed;
    ledArray[readPixel][1] = readGreen;
    ledArray[readPixel][2] = readBlue;
    Serial.println("set ledarray");

    // maybe recentre and try again
    // currentDataPossition = ((String)data).indexOf("#",currentDataPossition);
}

void SpiSend(uint64_t data) {

    uint64_t tempData = data;
    // start coms
    digitalWrite(pinSS, LOW);

    for(int i = 0; i < 64; i++) {

        // clock off
        digitalWrite(pinSCK,LOW);

        // mask and send the data
        if(1 & tempData) {
            //Serial.println("yes");
            digitalWrite(pinMOSI,1);
        } else {
            //Serial.println("no");
            digitalWrite(pinMOSI,0);
        }

        // clock on
        digitalWrite(pinSCK,HIGH);
        
        // shift down one
        tempData = (tempData >> 1);
    }

    // latch enable
    digitalWrite(pinSS, HIGH);
    digitalWrite(pinSS, LOW);
}

uint32_t bamCallback(uint32_t currentTime) {
    
    uint32_t Mask = 0;
    // look into the colour array and determin for how long to hold the pins high
    if(colourcounter < ledArray[counter-71][0]) {
        spiRed = (spiRed | 1);
    } else {
        Mask = 0b11111111111111111111111111111110;
        spiRed = (spiRed & Mask);
    }

    if(colourcounter < ledArray[counter-71][1]) {
        spiRed = (spiRed | 2);
    } else {
        Mask = 0b11111111111111111111111111111101;
        spiRed = (spiRed & Mask);
    }

    if(colourcounter < ledArray[counter-71][2]) {
        spiRed = (spiRed | 4);
    } else {
        Mask = 0b11111111111111111111111111111011;
        spiRed = (spiRed & Mask);
    }

    SpiSend(spiRed);

    // increment the colourcounter
    if(colourcounter > duty) {
        // do nothing
    } else {
        colourcounter++;
    }
    //interrupts();
    return (currentTime + CORE_TICK_RATE*.1953);
}

uint32_t layerCallback(uint32_t currentTime) {

    if(counter == 78) {
        counter = 70;
    }

    // force the coloue high, as it may still be low from last layer
    colourcounter = 0;
    SpiSend(0x00000000);

    // turn off the last layer
    if(counter == 70) {
        digitalWrite(77, 0);
    } else {
        digitalWrite((counter - 1), 0);
    }

    // colourcounter = 0;
    // eneable the next layer
    digitalWrite(counter, 1);

    // increment
    counter++;       
    return (currentTime + CORE_TICK_RATE*1.5625);
}

extern "C"
{
    void __ISR(_TIMER_3_VECTOR,ipl2) playSa(void)
    {
        // Clear the interrupt flag
        // Red
        for (int i = 0; i < 8; ++i)
        {
            if(redchange) {
                if(ledArray[i][0] >= 9) {
                    ledArray[i][0] = 0;
                } else {
                    ledArray[i][0] += direction;
                }
            }

            if(bluechange) {
                if(ledArray[i][1] >= 9) {
                    ledArray[i][1] = 0;
                } else {
                    ledArray[i][1] += direction;
                }
            }
            
            if(greenchange) {
                if(ledArray[i][2] >= 9) {
                    ledArray[i][2] = 0;
                } else {
                    ledArray[i][2] += direction;
                }
            }
        }
        INTClearFlag(INT_T3);
    }
} 